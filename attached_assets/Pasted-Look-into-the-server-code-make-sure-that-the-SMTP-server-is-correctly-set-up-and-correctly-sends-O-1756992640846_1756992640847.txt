Look into the server code, make sure that the SMTP server is correctly set up, and correctly sends OTP Also, I need you to make sure that OTP is handled temporarily in some data structure on the server side, such that when OTP is entered, it is again taken to the server side to be validated. And then HTTP-only cookies would be sent to the client side, which will also contain a JWT, The client and server will use the same secret to create and validate tokens JWT_SECRET.

-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.authorized_admins (
id uuid NOT NULL DEFAULT gen_random_uuid(),
email text NOT NULL UNIQUE,
name text NOT NULL,
role text NOT NULL,
approval_order integer NOT NULL,
is_active boolean NOT NULL DEFAULT true,
created_at timestamp with time zone NOT NULL DEFAULT now(),
updated_at timestamp with time zone NOT NULL DEFAULT now(),
CONSTRAINT authorized_admins_pkey PRIMARY KEY (id)
);
CREATE TABLE public.club_formation_requests (
id uuid NOT NULL DEFAULT gen_random_uuid(),
club_name text NOT NULL,
proposed_by_name text NOT NULL,
proposed_by_email text NOT NULL,
proposed_by_phone text,
club_description text NOT NULL,
club_objectives text NOT NULL,
faculty_advisor text,
initial_members ARRAY,
proposed_activities text,
charter_document_url text,
status text DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'approved'::text, 'rejected'::text])),
created_at timestamp with time zone NOT NULL DEFAULT now(),
updated_at timestamp with time zone NOT NULL DEFAULT now(),
CONSTRAINT club_formation_requests_pkey PRIMARY KEY (id)
);
CREATE TABLE public.clubs (
id uuid NOT NULL DEFAULT gen_random_uuid(),
name text NOT NULL UNIQUE,
description text,
coordinator_names text NOT NULL,
coordinator_emails text NOT NULL,
channel_links text,
is_active boolean DEFAULT true,
avatar_url text NOT NULL DEFAULT '""'::text,
created_at timestamp with time zone NOT NULL DEFAULT now(),
updated_at timestamp with time zone NOT NULL DEFAULT now(),
CONSTRAINT clubs_pkey PRIMARY KEY (id)
);
CREATE TABLE public.event_approvals (
id uuid NOT NULL DEFAULT gen_random_uuid(),
event_proposal_id uuid NOT NULL,
admin_email text NOT NULL,
approved_at timestamp with time zone,
comments text,
status text NOT NULL DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'approved'::text, 'rejected'::text])),
created_at timestamp with time zone NOT NULL DEFAULT now(),
updated_at timestamp with time zone NOT NULL DEFAULT now(),
CONSTRAINT event_approvals_pkey PRIMARY KEY (id),
CONSTRAINT event_approvals_admin_email_fkey FOREIGN KEY (admin_email) REFERENCES public.authorized_admins(email),
CONSTRAINT event_approvals_event_proposal_id_fkey FOREIGN KEY (event_proposal_id) REFERENCES public.event_proposals(id)
);
CREATE TABLE public.event_proposals (
id uuid NOT NULL DEFAULT gen_random_uuid(),
event_name text NOT NULL,
organizer_name text NOT NULL,
organizer_email text NOT NULL,
organizer_phone text,
event_type text NOT NULL,
event_date date NOT NULL,
start_time time without time zone NOT NULL,
end_time time without time zone NOT NULL,
venue text NOT NULL,
expected_participants integer NOT NULL,
budget_estimate numeric,
description text NOT NULL,
objectives text,
additional_requirements text,
pdf_document_url text,
status text DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'approved'::text, 'rejected'::text])),
created_at timestamp with time zone NOT NULL DEFAULT now(),
updated_at timestamp with time zone NOT NULL DEFAULT now(),
CONSTRAINT event_proposals_pkey PRIMARY KEY (id)
);
CREATE TABLE public.hostel_info (
id uuid NOT NULL DEFAULT gen_random_uuid(),
hostel_name text NOT NULL,
warden_name text,
warden_contact text,
capacity integer,
facilities ARRAY,
rules ARRAY,
timings jsonb,
emergency_contact text,
created_at timestamp with time zone NOT NULL DEFAULT now(),
updated_at timestamp with time zone NOT NULL DEFAULT now(),
CONSTRAINT hostel_info_pkey PRIMARY KEY (id)
);
CREATE TABLE public.important_contacts (
id uuid NOT NULL DEFAULT gen_random_uuid(),
name text NOT NULL,
designation text,
phone_number text NOT NULL,
email text,
department text,
is_emergency boolean DEFAULT false,
display_order integer DEFAULT 0,
created_at timestamp with time zone NOT NULL DEFAULT now(),
updated_at timestamp with time zone NOT NULL DEFAULT now(),
CONSTRAINT important_contacts_pkey PRIMARY KEY (id)
);
CREATE TABLE public.mess_hostel_committee (
id uuid NOT NULL DEFAULT gen_random_uuid(),
name text NOT NULL,
email text NOT NULL,
created_at timestamp with time zone NOT NULL DEFAULT now(),
updated_at timestamp with time zone NOT NULL DEFAULT now(),
CONSTRAINT mess_hostel_committee_pkey PRIMARY KEY (id)
);
CREATE TABLE public.student_representatives (
id uuid NOT NULL DEFAULT gen_random_uuid(),
name text NOT NULL,
position text NOT NULL,
email text NOT NULL,
official_email text,
program text NOT NULL,
year integer NOT NULL,
branch text NOT NULL,
created_at timestamp with time zone NOT NULL DEFAULT now(),
updated_at timestamp with time zone NOT NULL DEFAULT now(),
CONSTRAINT student_representatives_pkey PRIMARY KEY (id)
);

This is the schema for the database. In the approvable table, all the admins will approve the event with the same event ID. Only then will the event be fully approved; otherwise, it will be pending and rejected if all admins reject. This should all be done on the  server side, remember only approve requests, that is, PATCH and authentication api routes are supposed to be

the only list of API routes, login, send otp, veriofy otp, approve event, reject event. fetchevents all are proteted routes except for fetch evetnts and fetch event details.

thinl step by step